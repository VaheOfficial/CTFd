/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Signup
         * @description Register a new user
         */
        post: operations["signup_api_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Authenticate a user
         */
        post: operations["login_api_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Get current user information
         */
        get: operations["get_current_user_info_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/totp/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup Totp
         * @description Setup TOTP for current user
         */
        post: operations["setup_totp_api_auth_totp_setup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/totp/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable Totp
         * @description Enable TOTP with verification
         */
        post: operations["enable_totp_api_auth_totp_enable_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/totp/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable Totp
         * @description Disable TOTP
         */
        post: operations["disable_totp_api_auth_totp_disable_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout (client should discard tokens)
         */
        post: operations["logout_api_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/challenges/{challenge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Challenge
         * @description Get challenge details
         */
        get: operations["get_challenge_api_challenges__challenge_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/challenges/{challenge_id}/instance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Challenge Instance
         * @description Create or get challenge instance (for dynamic flags)
         */
        post: operations["create_challenge_instance_api_challenges__challenge_id__instance_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/instances/{instance_id}/lab/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Lab Status
         * @description Get lab instance status
         */
        get: operations["get_lab_status_api_instances__instance_id__lab_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/instances/{instance_id}/lab/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Lab Instance
         * @description Start lab instance
         */
        post: operations["start_lab_instance_api_instances__instance_id__lab_start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/instances/{instance_id}/lab/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop Lab Instance
         * @description Stop lab instance
         */
        post: operations["stop_lab_instance_api_instances__instance_id__lab_stop_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/seasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Seasons
         * @description Get all seasons
         */
        get: operations["get_seasons_api_seasons_get"];
        put?: never;
        /**
         * Create Season
         * @description Create a new season (admin only)
         */
        post: operations["create_season_api_seasons_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/seasons/{season_id}/weeks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Season Weeks
         * @description Get weeks for a season
         */
        get: operations["get_season_weeks_api_seasons__season_id__weeks_get"];
        put?: never;
        /**
         * Create Week
         * @description Create a week in a season (admin only)
         */
        post: operations["create_week_api_seasons__season_id__weeks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/challenges/{challenge_id}/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit Flag
         * @description Submit a flag for a challenge
         */
        post: operations["submit_flag_api_challenges__challenge_id__submit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/challenges/{challenge_id}/hint/{hint_order}/consume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Consume Hint
         * @description Consume a hint and deduct points
         */
        post: operations["consume_hint_api_challenges__challenge_id__hint__hint_order__consume_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/artifacts/{artifact_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Artifact
         * @description Download an artifact via signed URL
         */
        get: operations["download_artifact_api_artifacts__artifact_id__download_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/leaderboard/season/{season_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Season Leaderboard
         * @description Get leaderboard for a season
         */
        get: operations["get_season_leaderboard_api_leaderboard_season__season_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/badges/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Badges
         * @description Get current user's badges
         */
        get: operations["get_my_badges_api_badges_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/challenges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Challenge
         * @description Register a new challenge from challenge.yml
         */
        post: operations["create_challenge_api_admin_challenges_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/challenges/{challenge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Challenge
         * @description Update an existing challenge
         */
        patch: operations["update_challenge_api_admin_challenges__challenge_id__patch"];
        trace?: never;
    };
    "/api/admin/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Audit Logs
         * @description Get audit logs (admin only)
         */
        get: operations["get_audit_logs_api_admin_audit_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/leaderboard/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Leaderboard Snapshot
         * @description Generate leaderboard snapshot for a season
         */
        post: operations["create_leaderboard_snapshot_api_admin_leaderboard_snapshot_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/ai/generate-challenge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Wrapper */
        post: operations["wrapper_api_admin_ai_generate_challenge_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/ai/materialize/{challenge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Materialize Challenge
         * @description Materialize artifacts for an AI-generated challenge
         */
        post: operations["materialize_challenge_api_admin_ai_materialize__challenge_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/ai/publish/{challenge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Publish Ai Challenge
         * @description Publish an AI-generated challenge
         */
        post: operations["publish_ai_challenge_api_admin_ai_publish__challenge_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_api_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description API root endpoint
         */
        get: operations["root_api_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AuditLogResponse */
        AuditLogResponse: {
            /** Id */
            id: string;
            /** Actor User Id */
            actor_user_id: string | null;
            /** Action */
            action: string;
            /** Entity Type */
            entity_type: string;
            /** Entity Id */
            entity_id: string;
            /** Details Json */
            details_json: Record<string, never>;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** BadgeResponse */
        BadgeResponse: {
            /** Id */
            id: string;
            /** Code */
            code: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Icon Key */
            icon_key: string;
            /**
             * Awarded At
             * Format: date-time
             */
            awarded_at: string;
            /** Reason */
            reason: string;
        };
        /** ChallengeInstanceResponse */
        ChallengeInstanceResponse: {
            /** Id */
            id: string;
            /** Challenge Id */
            challenge_id: string;
            /** Dynamic Seed */
            dynamic_seed: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Expires At */
            expires_at: string | null;
        };
        /** ChallengeResponse */
        ChallengeResponse: {
            /** Id */
            id: string;
            /** Slug */
            slug: string;
            /** Title */
            title: string;
            /** Track */
            track: string;
            /** Difficulty */
            difficulty: string;
            /** Points Base */
            points_base: number;
            /** Time Cap Minutes */
            time_cap_minutes: number;
            /** Mode */
            mode: string;
            /** Description */
            description: string;
            /** Artifacts */
            artifacts: Record<string, never>[];
            /** Hints */
            hints: Record<string, never>[];
            /** Has Lab */
            has_lab: boolean;
        };
        /**
         * ChallengeStatus
         * @enum {string}
         */
        ChallengeStatus: "DRAFT" | "READY" | "PUBLISHED" | "ARCHIVED";
        /** ConsumeHintResponse */
        ConsumeHintResponse: {
            /** Hint Text */
            hint_text: string;
            /** Cost Percent */
            cost_percent: number;
            /** Points Deducted */
            points_deducted: number;
            /** Remaining Points */
            remaining_points: number;
        };
        /** CreateChallengeRequest */
        CreateChallengeRequest: {
            /** Challenge Yaml */
            challenge_yaml: Record<string, never>;
            /** Season Id */
            season_id?: string | null;
            /** Week Index */
            week_index?: number | null;
        };
        /** CreateSeasonRequest */
        CreateSeasonRequest: {
            /** Name */
            name: string;
            /**
             * Start At
             * Format: date-time
             */
            start_at: string;
            /**
             * End At
             * Format: date-time
             */
            end_at: string;
            /** Description */
            description?: string | null;
            /** Theme */
            theme?: string | null;
        };
        /** CreateWeekRequest */
        CreateWeekRequest: {
            /** Season Id */
            season_id: string;
            /** Index */
            index: number;
            /**
             * Opens At
             * Format: date-time
             */
            opens_at: string;
            /**
             * Closes At
             * Format: date-time
             */
            closes_at: string;
            /**
             * Is Mini Mission
             * @default false
             */
            is_mini_mission: boolean;
        };
        /** GenerateChallengeResponse */
        GenerateChallengeResponse: {
            /** Challenge Id */
            challenge_id: string;
            /** Generation Id */
            generation_id: string;
            /** Generated Json */
            generated_json: Record<string, never>;
            /** Provider */
            provider: string;
            /** Model */
            model: string;
            /** Tokens Used */
            tokens_used: number | null;
            /** Cost Usd */
            cost_usd: number | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LabStatusResponse */
        LabStatusResponse: {
            /** Instance Id */
            instance_id: string;
            /** Status */
            status: string;
            /** Started At */
            started_at: string | null;
            /** Expires At */
            expires_at: string | null;
            /** Kasm Url */
            kasm_url: string | null;
            /** Vpn Config */
            vpn_config: string | null;
        };
        /** LeaderboardEntry */
        LeaderboardEntry: {
            /** Rank */
            rank: number;
            /** User Id */
            user_id: string;
            /** Username */
            username: string;
            /** Total Points */
            total_points: number;
            /** Challenges Solved */
            challenges_solved: number;
            /** Last Submission */
            last_submission: string | null;
            /**
             * Is Current User
             * @default false
             */
            is_current_user: boolean;
        };
        /** LeaderboardResponse */
        LeaderboardResponse: {
            /** Season Id */
            season_id: string;
            /** Season Name */
            season_name: string;
            /** Total Participants */
            total_participants: number;
            /** Entries */
            entries: components["schemas"]["LeaderboardEntry"][];
            /** Current User Rank */
            current_user_rank: number | null;
            /**
             * Last Updated
             * Format: date-time
             */
            last_updated: string;
        };
        /** LoginRequest */
        LoginRequest: {
            /** Username */
            username: string;
            /** Password */
            password: string;
            /** Totp Code */
            totp_code?: string | null;
        };
        /** LoginResponse */
        LoginResponse: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
            /** User */
            user: Record<string, never>;
        };
        /** MaterializeRequest */
        MaterializeRequest: Record<string, never>;
        /** PublishRequest */
        PublishRequest: {
            /** Season Id */
            season_id?: string | null;
            /** Week Index */
            week_index?: number | null;
        };
        /** SeasonResponse */
        SeasonResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /**
             * Start At
             * Format: date-time
             */
            start_at: string;
            /**
             * End At
             * Format: date-time
             */
            end_at: string;
            /** Description */
            description: string | null;
            /** Theme */
            theme: string | null;
            /** Is Active */
            is_active: boolean;
            /** Current Week */
            current_week: number | null;
        };
        /** SignupRequest */
        SignupRequest: {
            /** Username */
            username: string;
            /** Email */
            email: string;
            /** Password */
            password: string;
        };
        /** SubmitFlagRequest */
        SubmitFlagRequest: {
            /** Flag */
            flag: string;
        };
        /** SubmitFlagResponse */
        SubmitFlagResponse: {
            /** Correct */
            correct: boolean;
            /** Points Awarded */
            points_awarded: number;
            /** Is First Blood */
            is_first_blood: boolean;
            /** Message */
            message: string;
        };
        /** TOTPSetupResponse */
        TOTPSetupResponse: {
            /** Secret */
            secret: string;
            /** Qr Code Url */
            qr_code_url: string;
        };
        /** UpdateChallengeRequest */
        UpdateChallengeRequest: {
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            status?: components["schemas"]["ChallengeStatus"] | null;
            /** Points Base */
            points_base?: number | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WeekResponse */
        WeekResponse: {
            /** Id */
            id: string;
            /** Season Id */
            season_id: string;
            /** Index */
            index: number;
            /**
             * Opens At
             * Format: date-time
             */
            opens_at: string;
            /**
             * Closes At
             * Format: date-time
             */
            closes_at: string;
            /** Is Mini Mission */
            is_mini_mission: boolean;
            /** Is Open */
            is_open: boolean;
            /** Challenges */
            challenges: Record<string, never>[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    signup_api_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_api_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_info_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    setup_totp_api_auth_totp_setup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPSetupResponse"];
                };
            };
        };
    };
    enable_totp_api_auth_totp_enable_post: {
        parameters: {
            query: {
                totp_code: string;
                secret: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    disable_totp_api_auth_totp_disable_post: {
        parameters: {
            query: {
                totp_code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_challenge_api_challenges__challenge_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_challenge_instance_api_challenges__challenge_id__instance_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengeInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_lab_status_api_instances__instance_id__lab_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabStatusResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_lab_instance_api_instances__instance_id__lab_start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stop_lab_instance_api_instances__instance_id__lab_stop_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_seasons_api_seasons_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SeasonResponse"][];
                };
            };
        };
    };
    create_season_api_seasons_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSeasonRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_season_weeks_api_seasons__season_id__weeks_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                season_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeekResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_week_api_seasons__season_id__weeks_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                season_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWeekRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_flag_api_challenges__challenge_id__submit_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitFlagRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmitFlagResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    consume_hint_api_challenges__challenge_id__hint__hint_order__consume_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
                hint_order: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumeHintResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_artifact_api_artifacts__artifact_id__download_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                artifact_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_season_leaderboard_api_leaderboard_season__season_id__get: {
        parameters: {
            query?: {
                /** @description Number of entries to return */
                limit?: number;
                /** @description Use cached snapshot if available */
                snapshot?: boolean;
            };
            header?: never;
            path: {
                season_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeaderboardResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_badges_api_badges_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeResponse"][];
                };
            };
        };
    };
    create_challenge_api_admin_challenges_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateChallengeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_challenge_api_admin_challenges__challenge_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateChallengeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_audit_logs_api_admin_audit_get: {
        parameters: {
            query?: {
                /** @description Filter by actor user ID */
                actor?: string | null;
                /** @description Filter by entity type */
                entity_type?: string | null;
                /** @description Filter logs since this timestamp */
                since?: string | null;
                /** @description Filter logs until this timestamp */
                until?: string | null;
                /** @description Maximum number of logs to return */
                limit?: number;
                /** @description Pagination cursor */
                cursor?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuditLogResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_leaderboard_snapshot_api_admin_leaderboard_snapshot_post: {
        parameters: {
            query: {
                season_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wrapper_api_admin_ai_generate_challenge_post: {
        parameters: {
            query: {
                args: unknown;
                kwargs: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateChallengeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    materialize_challenge_api_admin_ai_materialize__challenge_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MaterializeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    publish_ai_challenge_api_admin_ai_publish__challenge_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PublishRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_api_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    root_api_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
